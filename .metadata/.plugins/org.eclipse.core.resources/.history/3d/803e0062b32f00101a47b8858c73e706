package com.ajeet.docManagement.serviceimpl;

import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import com.ajeet.docManagement.Entity.Token;
import com.ajeet.docManagement.Entity.User;
import com.ajeet.docManagement.Repository.TokenRepository;
import com.ajeet.docManagement.Repository.UserRepository;
import com.ajeet.docManagement.config.JwtProvider;
import com.ajeet.docManagement.exception.UserException;
import com.ajeet.docManagement.request.LoginRequest;
import com.ajeet.docManagement.request.OtpPasswordResetRequest;
import com.ajeet.docManagement.request.OtpRequest;
import com.ajeet.docManagement.request.OtpVerifyRequest;
import com.ajeet.docManagement.response.AuthResponse;
import com.ajeet.docManagement.response.TokenValidationResponse;
import com.ajeet.docManagement.service.AuthService;
import com.ajeet.docManagement.service.EmailService;
import com.ajeet.docManagement.service.OtpService;
import com.ajeet.docManagement.service.TokenService;
import com.ajeet.docManagement.service.Userservice;
import com.ajeet.docManagement.userDetailServiceimpl.UserDetailService;

import io.jsonwebtoken.Claims;

@Service
public class AuthServiceImpl implements AuthService {
	@Autowired
	private UserDetailService userDetailService;

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private JwtProvider jwtProvider;

	@Autowired
	private PasswordEncoder passwordEncoder;

	@Autowired
	private UserDetailService customUserService;
	
    @Autowired
    private OtpService otpService;
    
    @Autowired
    private Userservice userService;
    
    @Autowired
    private JwtProvider resetTokenService;
    
    @Autowired
    private EmailService emailService;

    private final TokenRepository tokenRepository;

    // Constructor Injection
    public AuthServiceImpl(TokenRepository tokenRepository) {
        this.tokenRepository = tokenRepository;
    }

  //  private final TokenRepository tokenRepository;

	@Override
	public ResponseEntity<AuthResponse> createUserHandler(User user) throws UserException {
		String email = user.getEmail();
		System.out.print("insideAPI");
		String password = user.getPassword();
		String userName = user.getUsername();
		String firstName = user.getFirstname();
		String lastName = user.getLastname();
		String role = user.getRole();
		
		System.out.println("authcontroller");
		Optional<User> isUserExist = userRepository.findByUsername(userName);
		if (isUserExist.isPresent()) {
			throw new UserException("user already registered");
		} else {
			User createUser = new User();
			createUser.setEmail(email);
			// set encoded password
			createUser.setPassword(passwordEncoder.encode(password));
			createUser.setFirstname(firstName);
			createUser.setLastname(lastName);
			createUser.setUsername(userName);
			createUser.setRole(role);

			// now save user using userrepository

			User savedUser = userRepository.save(createUser);

			// create authentication
			Authentication authentication = new UsernamePasswordAuthenticationToken(email, password);

			SecurityContextHolder.getContext().setAuthentication(authentication);

			AuthResponse authResponse = new AuthResponse();
			// authResponse.setJwt(token);
			authResponse.setMessage("Sign up Done");
			return new ResponseEntity<>(authResponse, HttpStatus.CREATED);
		}
	}

	@Override
	public ResponseEntity<AuthResponse> loginUserHandler(LoginRequest loginRequest) {
		String userName = loginRequest.getUsername();
		String password = loginRequest.getPassword();
		String email = loginRequest.getEmail();
		String loginType = loginRequest.getLogintype();
		String jwttoken = "";
		// String email = loginRequest.getPassword();
		AuthResponse authResponse = new AuthResponse();
		

		System.out.println("loginType" + loginType);

		Authentication authentication = jwtProvider.authenticate(userName, password);
		SecurityContextHolder.getContext().setAuthentication(authentication);
		
        if(loginType == "email") {
       
        	 jwttoken = jwtProvider.generateToken(email,loginType);  
        	 System.out.println(jwttoken+"jwttoken");
        }
        if(loginType == "username") {
        	jwttoken = jwtProvider.generateToken(userName,loginType); 
        	System.out.println("jwttoken" + jwttoken);
        }		
	

		if (authentication.isAuthenticated()) {

			authResponse.setMessage(jwttoken);

			return new ResponseEntity<AuthResponse>(authResponse, HttpStatus.CREATED);
		}
			authResponse.setMessage("Invalid User");
		return new ResponseEntity<AuthResponse>(authResponse, HttpStatus.BAD_GATEWAY);
	}

	@Override
	public ResponseEntity<?> validateToken(String token)  {
		try {
			System.out.println("inside validate token");
			if (token != null) {
					
			        Token checkToken = tokenRepository.findByToken(token);
			        if(checkToken.isRevoked()) {
			        	return ResponseEntity.badRequest().body(new TokenValidationResponse(false, "Invalid token format"));
			        }
			        Claims claims = jwtProvider.validateToken(token);

				// Build a response object
				return ResponseEntity.ok().body(new TokenValidationResponse(true, "Token is valid"));
			} else {
				return ResponseEntity.badRequest().body(new TokenValidationResponse(false, "Invalid token format"));
			}
		} catch (Exception e) {
			// Handle invalid tokens
			System.out.println(e + "eeeee");
			return ResponseEntity.status(401).body(new TokenValidationResponse(false, "Invalid or expired token"));
		}
	}

	@Override
	public String getToken(LoginRequest loginrequest) {
		String userName = loginrequest.getUsername();
		String email = loginrequest.getEmail();
		System.out.println("userName" + userName);	
		String password = loginrequest.getPassword();
		Authentication authentication = jwtProvider.authenticate(userName, password);

		if (authentication.isAuthenticated()) { 
			return jwtProvider.generateToken(userName,email);
		} else {
			throw new RuntimeException("invalid access");
		}
	}

	@Override
	public ResponseEntity<?> logout() {
		 Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
	        String username = authentication.getName();
	       
	        // Get the token from the request
	        String jwt = authentication.getCredentials().toString();
	        Token token = tokenRepository.findByToken(jwt);
	        // Revoke the token in the database
	        token.setRevoked(true);
	        tokenRepository.save(token);

	        // Clear the authentication context
	        SecurityContextHolder.clearContext();


		return ResponseEntity.ok("Logged out Successfully!");
	}

	@Override
	public ResponseEntity<String> getAuthenticationStatus(String token) {
	    if (token == null || !token.startsWith("Bearer ")) {
	        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid token format");
	    }

	    String jwtToken = token.substring(7); // Remove "Bearer " prefix
	    Claims claims = jwtProvider.validateToken(jwtToken);

	    if (claims == null) {
	        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid or expired token");
	    }

	    return ResponseEntity.ok(claims.getSubject());
	}

	@Override
	public ResponseEntity<?> verifyOtp(OtpVerifyRequest request) {
        boolean isValid = otpService.verifyOtp(request.getPhone(), request.getOtp());
        if (isValid) {
            return ResponseEntity.ok("OTP verified successfully");
        } else {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid or expired OTP");
        }
	}

	@Override
	public ResponseEntity<?> sendOtp(OtpRequest request) {
		 String otp =  otpService.sendOtp(request.getPhone());
	        return ResponseEntity.ok("OTP sent: Your OTP is: "+ otp);
	}

	@Override
	public ResponseEntity<?> resetPasswordWithOtp(OtpPasswordResetRequest req) {
		  boolean isValid = otpService.verifyOtp(req.getPhone(), req.getOtp());
	        if (!isValid) {
	            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid or expired OTP");
	        }
	        System.out.println("req.getPhone()"+req.getPhone());
	        userService.updatePasswordByEmail(req.getEmail(), req.getNewPassword());
	        return ResponseEntity.ok("Password updated successfully.");
	}

	@Override
	public ResponseEntity<?> requestResetLink(Map<String, String> body) {
        String email = body.get("email");
        String userName = body.get("username");
        String token = resetTokenService.generateToken(userName,email);
        String link = "https://your-app.com/reset-password?token=" + token;

        emailService.send(email, "Reset your password",
                "Click this link to reset your password:\n" + link);

        return ResponseEntity.ok("Reset link sent to email.");
	}

	@Override
	public ResponseEntity<?> resetPassword(Map<String, String> body) {
        String token = body.get("token");
        String newPassword = body.get("newPassword");

        Claims claim = resetTokenService.validateToken(token);
        
        if (claim == null) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                                 .body("Invalid or expired token");
        }
        String email = (String) claim.get("email");
        System.out.println("email=>"+email);
        userService.updatePasswordByEmail(email, newPassword);
        resetTokenService.invalidate(token);
        return ResponseEntity.ok("Password updated successfully.");
    }

	@Override
    public ResponseEntity<Map<String, String>> loginWithOtp(OtpVerifyRequest request) {
        boolean isValid = otpService.verifyOtp(request.getPhone(), request.getOtp());
        if (!isValid) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("error", "Invalid or expired OTP"));
        }

        Optional<User> user = userRepository.findByPhone(request.getPhone());
        String token = jwtProvider.generateToken(user.get().getUsername(), user.get().getEmail());

        Authentication auth = new UsernamePasswordAuthenticationToken(user.get().getUsername(), null, null);
        SecurityContextHolder.getContext().setAuthentication(auth);

        return ResponseEntity.ok(Map.of("message", "OTP verified successfully", "token", token));
    }

}
